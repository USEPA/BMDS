name: Test Linux

on:
  pull_request:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  pybmds:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # os: [ubuntu-22.04, windows-2022, macos-14]
        os: [ubuntu-22.04]
    steps:
      - uses: actions/checkout@v4

      # --------------------------------------------------------
      # --------------- Install C++ dependencies ---------------
      # --------------------------------------------------------
      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: vcpkg_installed
          key: ${{ runner.os }}-vcpkg_installed-${{ hashFiles('vcpkg.json') }}

      - name: Acquire vcpkg
        if: steps.cache-deps.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: "Microsoft/vcpkg"
          path: vcpkg
          ref: c9c17dcea3016bc241df0422e82b8aea212dcb93

      - name: Install libraries with vcpkg.json (macOS/Linux)
        if: steps.cache-deps.outputs.cache-hit != 'true' && runner.os != 'Windows'
        run: "${{ github.workspace }}/vcpkg/bootstrap-vcpkg.sh"

      - name: Install libraries with vcpkg.json (macOS/Linux)
        if: steps.cache-deps.outputs.cache-hit != 'true' && runner.os != 'Windows'
        shell: bash
        run: ./vcpkg/vcpkg install

      - name: Install libraries with vcpkg.json (Windows)
        if: steps.cache-deps.outputs.cache-hit != 'true' && runner.os == 'Windows'
        shell: bash
        run: ./vcpkg/bootstrap-vcpkg.sh

      - name: Install libraries with vcpkg.json (Windows)
        if: steps.cache-deps.outputs.cache-hit != 'true' && runner.os == 'Windows'
        shell: bash
        run: ./vcpkg/vcpkg.exe install

      # --------------------------------------------------------
      # --------------------- Setup pybmds ---------------------
      # --------------------------------------------------------

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          cache-dependency-glob: "**/pyproject.toml"

      - name: Build pybmds
        run: |
          # install dependencies
          sudo apt-get update -y
          sudo apt-get install -y automake build-essential libtool make cmake lcov

          # set export locations
          export EIGEN_DIR="${{ github.workspace }}/vcpkg_installed/x64-linux/include/eigen3"
          export NLOPT_DIR="${{ github.workspace }}/vcpkg_installed/x64-linux/include"
          export GSL_DIR="${{ github.workspace }}/vcpkg_installed/x64-linux/lib"
          export CMAKE_C_COMPILER="/usr/bin/gcc-11"
          export CMAKE_CXX_COMPILER="/usr/bin/g++-11"
          export TEST_EXC="'/usr/include/*'"

          echo $EIGEN_DIR
          ls -laht $EIGEN_DIR

          echo $NLOPT_DIR
          ls -laht $NLOPT_DIR

          echo $GSL_DIR
          ls -laht $GSL_DIR

          uv pip install --system -v -e ".[dev,docs]"
          stubgen -p pybmds.bmdscore -o src
          ruff format src/pybmds/bmdscore.pyi
          python -c "import pybmds; print(pybmds.bmdscore.version())"

          ls -lah src/pybmds
          ldd src/pybmds/bmdscore*.so


