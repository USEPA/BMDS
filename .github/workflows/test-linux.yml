name: Test Linux

on:
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      generateDocx:
        description: 'Generate docx report'
        required: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  pybmds:
    runs-on: ubuntu-24.04
    env:
      generateDocx: ${{ inputs.generateDocx }}
      VCPKG_HOST_TRIPLET: x64-linux
    steps:
      - uses: actions/checkout@v4

      - name: Cache dependencies
        id: cache-vcpkg-deps
        uses: actions/cache@v4
        with:
          path: vcpkg_installed
          key: vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}
      - name: Acquire vcpkg
        if: steps.cache-vcpkg-deps.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: "Microsoft/vcpkg"
          path: vcpkg
          ref: c9c17dcea3016bc241df0422e82b8aea212dcb93
      - name: Install libraries with vcpkg.json
        if: steps.cache-vcpkg-deps.outputs.cache-hit != 'true'
        shell: bash
        run: |
          ./vcpkg/bootstrap-vcpkg.sh
          ./vcpkg/vcpkg install --host-triplet="$VCPKG_HOST_TRIPLET" --overlay-ports=./vendor/ports

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          cache-dependency-glob: "**/pyproject.toml"
      - name: Install dependencies
        run: |
          echo "generateDocx: $generateDocx"
          if [ "$generateDocx" = "true" ]; then
            sudo apt-get install -y pandoc
          fi
      - name: Build pybmds
        run: |
          uv pip install pybind11==3.0.0 --target=./pybind11
          export CMAKE_PREFIX_PATH=${{ github.workspace }}/pybind11/pybind11/share/cmake
          export CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)
          uv pip install --system -v -e ".[dev,docs]"
          stubgen -p pybmds.bmdscore -o src
          ruff format src/pybmds/bmdscore.pyi
          python -c "import pybmds; print(pybmds.bmdscore.version())"
      - name: Check linked files
        run: |
          ls -lah src/pybmds
          ldd src/pybmds/bmdscore*.so
      - name: loc
        run: |
          sudo apt-get install -y cloc
          echo "# Lines of Code Report" >> $GITHUB_STEP_SUMMARY
          poe loc >> $GITHUB_STEP_SUMMARY
      - name: Check linting
        run: |
          poe lint
      - name: Test with pytest
        run: |
          coverage run -m pytest
          echo "# Python coverage report" >> $GITHUB_STEP_SUMMARY
          coverage report --format=markdown >> $GITHUB_STEP_SUMMARY
          coverage html -d coverage -i
      - name: Build documentation
        run: |
          poe docs
          if [ "$generateDocx" = "true" ]; then
            poe docs-docx
            rm -rf docs/build/singlehtml
          fi
      - name: Upload Documentation
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: docs/build/
          retention-days: 14
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage
          retention-days: 14

  bmdscore:
    # TODO - fix
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          cache-dependency-glob: "**/pyproject.toml"
      - name: Install dependencies
        run: |
          source ./tools/linux_ci_setup.sh
      - name: Run clang-format
        run: |
          uv pip install --system poethepoet clang-format==19.1.3
          poe format-cpp
          git diff --exit-code --compact-summary || { echo "Code formatting failed; run 'poe format-cpp'"; exit 1; }
      - name: Build bmdscore
        run: |
          source ./tools/linux_ci_env.sh
          mkdir -p src/build
          cd src/build
          cmake ..
          make -j$(nproc)
      - name: Run tests and generate report
        run: |
          source ./tools/linux_ci_env.sh
          cd src/build
          make run_tests_with_coverage
      - uses: actions/upload-artifact@v4
        with:
          name: cpp-coverage
          path: |
            ./src/build/coverage/*
