[project]
name = "pybmds"
license = {text = "MIT License"}
authors = [
  {name = "BMDS Development Team"},
  {name = "Andy Shapiro", email = "shapiro.andy@epa.gov"},
  {name = "Cody Simmons", email = "simmons.cody@epa.gov"},
]
readme = "README.md"
description = "U.S. EPA Dose Response Modeling Software"
dynamic = ["version"]
classifiers = [
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Scientific/Engineering",
]
requires-python = ">=3.11"
dependencies = [
  "matplotlib>=3.7",
  "numpy",
  "openpyxl",
  "pandas>=2",
  "pydantic>=2",
  "python-docx",
  "scipy",
  "tabulate",
  "tqdm",
]

[project.urls]
"Source" = "https://github.com/USEPA/BMDS"
"Changes" = "https://github.com/USEPA/BMDS/blob/main/docs/source/history.md"
"Issue Tracker" = "https://github.com/USEPA/BMDS/issues"
"Documentation" = "https://usepa.github.io/BMDS/"

[project.optional-dependencies]
dev = [
  "poethepoet~=0.32.2",
  "coverage~=7.6.4",
  "mypy~=1.13.0",
  "pybind11==3.0.0",
  "pytest-mpl~=0.17.0",
  "pytest~=8.3.3",
  "ruff~=0.7.1",
  "setuptools~=75.3.0",
  "wheel~=0.44.0",
  "clang-format==19.1.3",
]
docs = [
  "Sphinx~=8.1.3",
  "myst-nb~=1.1.2",
  "myst-parser~=4.0.0",
  "furo==2024.8.6",
  "sphinx_design~=0.6.1",
  "sphinx-autobuild~=2024.10.3",
]

[project.scripts]
"bmds-priors-report" = "pybmds.cli.priors_report:main"

[build-system]
requires = [
  "pybind11==3.0.0",
  "setuptools~=75.3.0",
]
build-backend = "setuptools.build_meta"

[tool.coverage.report]
exclude_also = [
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
fail_under=96.7
precision=1

[tool.coverage.run]
include = [
  "src/pybmds/*"
]

[tool.pytest.ini_options]
testpaths = "tests/test_pybmds"
addopts = "--mpl-baseline-path=tests/test_pybmds/data/mpl"
python_files = ["test_*.py"]

[tool.ruff]
exclude = ["docs"]
line-length = 100
lint.select = ["F", "E", "W", "I", "UP", "S", "B", "T20", "ERA", "NPY", "RUF", "PTH"]
lint.ignore = ["E501"]
lint.isort.known-first-party = ["pybmds"]

[tool.ruff.lint.per-file-ignores]
"test_*.py" = ["S101", "ERA001"]
"setup.py" = ["S603", "S607"]

[tool.setuptools.dynamic]
version = {attr = "pybmds.__version__"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["pybmds*"]

[tool.poe.tasks.sync-dev]
help = "Sync dev environment after code checkout"
sequence = [
  {cmd = 'uv pip install -e ".[dev,docs]"'},
]

[tool.poe.tasks.test]
help = "Run Python tests"
cmd = "py.test"

[tool.poe.tasks.test-mpl]
help = "Run Python tests (compare images)"
cmd = "py.test --mpl --mpl-generate-summary=html"

[tool.poe.tasks.test-mpl-generate]
help = "Run Python tests (generate images)"
cmd = "py.test --mpl-generate-path=tests/test_pybmds/data/mpl"

[tool.poe.tasks.format]
help = "Format Python code"
sequence = [
  {cmd = "ruff format ."},
  {cmd = "ruff check . --fix --show-fixes"},
]

[tool.poe.tasks.format-cpp]
help = "Format C++ code"
sequence = [
  {shell = 'find src -name "*.cpp" -o -name "*.h" | xargs clang-format -i'},
]

[tool.poe.tasks.lint]
help = "Check Python formatting issues"
sequence = [
  {cmd = "ruff format . --check"},
  {cmd = "ruff check ."},
]

[tool.poe.tasks.build]
help = "Build Python package"
sequence = [
  {cmd ="python setup.py develop"},
  {cmd ="stubgen -p pybmds.bmdscore -o src/"},
  {cmd ="ruff format src/pybmds/bmdscore.pyi"},
]

[tool.poe.tasks.dist]
help = "Build wheel package for distribution"
sequence = [
  {cmd ="python setup.py bdist_wheel"},
]

[tool.poe.tasks.coverage]
help = "Run Python coverage and create HTML report"
sequence = [
  {cmd = "coverage run -m pytest"},
  {cmd = "coverage html -d coverage_html -i"},
]

[tool.poe.tasks.loc]
help = "Generate lines of code report"
cmd = """cloc \
		--exclude-dir=build,dist,venv \
		--exclude-ext=json,yaml,svg,toml,ini \
		--vcs=git \
		--counted loc-files.txt \
		--md \
		.
"""

[tool.poe.tasks.docs]
help = "Build html documentation"
cmd = "sphinx-build -W -b html docs/source docs/build/html"

[tool.poe.tasks.docs-docx]
help = "Build docx documentation"
sequence = [
  {cmd = "sphinx-build -W -b singlehtml docs/source docs/build/singlehtml"},
  {shell = "cd docs/build/singlehtml && pandoc -s index.html -o ../pybmds.docx"},
]

[tool.poe.tasks.docs-serve]
help = "Preview html documentation"
cmd = "sphinx-autobuild -b html docs/source docs/build/html --port 5800"
